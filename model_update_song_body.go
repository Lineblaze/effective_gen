/*
Music Collection

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateSongBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSongBody{}

// UpdateSongBody struct for UpdateSongBody
type UpdateSongBody struct {
	Group       *string `json:"group,omitempty"`
	Song        *string `json:"song,omitempty"`
	ReleaseDate *string `json:"releaseDate,omitempty"`
	Text        *string `json:"text,omitempty"`
	Link        *string `json:"link,omitempty"`
}

// NewUpdateSongBody instantiates a new UpdateSongBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSongBody() *UpdateSongBody {
	this := UpdateSongBody{}
	return &this
}

// NewUpdateSongBodyWithDefaults instantiates a new UpdateSongBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSongBodyWithDefaults() *UpdateSongBody {
	this := UpdateSongBody{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *UpdateSongBody) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSongBody) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *UpdateSongBody) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *UpdateSongBody) SetGroup(v string) {
	o.Group = &v
}

// GetSong returns the Song field value if set, zero value otherwise.
func (o *UpdateSongBody) GetSong() string {
	if o == nil || IsNil(o.Song) {
		var ret string
		return ret
	}
	return *o.Song
}

// GetSongOk returns a tuple with the Song field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSongBody) GetSongOk() (*string, bool) {
	if o == nil || IsNil(o.Song) {
		return nil, false
	}
	return o.Song, true
}

// HasSong returns a boolean if a field has been set.
func (o *UpdateSongBody) HasSong() bool {
	if o != nil && !IsNil(o.Song) {
		return true
	}

	return false
}

// SetSong gets a reference to the given string and assigns it to the Song field.
func (o *UpdateSongBody) SetSong(v string) {
	o.Song = &v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise.
func (o *UpdateSongBody) GetReleaseDate() string {
	if o == nil || IsNil(o.ReleaseDate) {
		var ret string
		return ret
	}
	return *o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSongBody) GetReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseDate) {
		return nil, false
	}
	return o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *UpdateSongBody) HasReleaseDate() bool {
	if o != nil && !IsNil(o.ReleaseDate) {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given string and assigns it to the ReleaseDate field.
func (o *UpdateSongBody) SetReleaseDate(v string) {
	o.ReleaseDate = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *UpdateSongBody) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSongBody) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *UpdateSongBody) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *UpdateSongBody) SetText(v string) {
	o.Text = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *UpdateSongBody) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSongBody) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *UpdateSongBody) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *UpdateSongBody) SetLink(v string) {
	o.Link = &v
}

func (o UpdateSongBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSongBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Song) {
		toSerialize["song"] = o.Song
	}
	if !IsNil(o.ReleaseDate) {
		toSerialize["releaseDate"] = o.ReleaseDate
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	return toSerialize, nil
}

type NullableUpdateSongBody struct {
	value *UpdateSongBody
	isSet bool
}

func (v NullableUpdateSongBody) Get() *UpdateSongBody {
	return v.value
}

func (v *NullableUpdateSongBody) Set(val *UpdateSongBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSongBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSongBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSongBody(val *UpdateSongBody) *NullableUpdateSongBody {
	return &NullableUpdateSongBody{value: val, isSet: true}
}

func (v NullableUpdateSongBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSongBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
