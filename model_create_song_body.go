/*
Music Collection

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateSongBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSongBody{}

// CreateSongBody struct for CreateSongBody
type CreateSongBody struct {
	Group string `json:"group"`
	Song  string `json:"song"`
}

type _CreateSongBody CreateSongBody

// NewCreateSongBody instantiates a new CreateSongBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSongBody(group string, song string) *CreateSongBody {
	this := CreateSongBody{}
	this.Group = group
	this.Song = song
	return &this
}

// NewCreateSongBodyWithDefaults instantiates a new CreateSongBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSongBodyWithDefaults() *CreateSongBody {
	this := CreateSongBody{}
	return &this
}

// GetGroup returns the Group field value
func (o *CreateSongBody) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *CreateSongBody) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *CreateSongBody) SetGroup(v string) {
	o.Group = v
}

// GetSong returns the Song field value
func (o *CreateSongBody) GetSong() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Song
}

// GetSongOk returns a tuple with the Song field value
// and a boolean to check if the value has been set.
func (o *CreateSongBody) GetSongOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Song, true
}

// SetSong sets field value
func (o *CreateSongBody) SetSong(v string) {
	o.Song = v
}

func (o CreateSongBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSongBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group"] = o.Group
	toSerialize["song"] = o.Song
	return toSerialize, nil
}

func (o *CreateSongBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group",
		"song",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateSongBody := _CreateSongBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateSongBody)

	if err != nil {
		return err
	}

	*o = CreateSongBody(varCreateSongBody)

	return err
}

type NullableCreateSongBody struct {
	value *CreateSongBody
	isSet bool
}

func (v NullableCreateSongBody) Get() *CreateSongBody {
	return v.value
}

func (v *NullableCreateSongBody) Set(val *CreateSongBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSongBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSongBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSongBody(val *CreateSongBody) *NullableCreateSongBody {
	return &NullableCreateSongBody{value: val, isSet: true}
}

func (v NullableCreateSongBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSongBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
