/*
Music Collection

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Song type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Song{}

// Song struct for Song
type Song struct {
	Id          string `json:"id"`
	Group       string `json:"group"`
	Song        string `json:"song"`
	ReleaseDate string `json:"releaseDate"`
	Text        string `json:"text"`
	Link        string `json:"link"`
}

type _Song Song

// NewSong instantiates a new Song object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSong(id string, group string, song string, releaseDate string, text string, link string) *Song {
	this := Song{}
	this.Id = id
	this.Group = group
	this.Song = song
	this.ReleaseDate = releaseDate
	this.Text = text
	this.Link = link
	return &this
}

// NewSongWithDefaults instantiates a new Song object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSongWithDefaults() *Song {
	this := Song{}
	return &this
}

// GetId returns the Id field value
func (o *Song) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Song) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Song) SetId(v string) {
	o.Id = v
}

// GetGroup returns the Group field value
func (o *Song) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *Song) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *Song) SetGroup(v string) {
	o.Group = v
}

// GetSong returns the Song field value
func (o *Song) GetSong() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Song
}

// GetSongOk returns a tuple with the Song field value
// and a boolean to check if the value has been set.
func (o *Song) GetSongOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Song, true
}

// SetSong sets field value
func (o *Song) SetSong(v string) {
	o.Song = v
}

// GetReleaseDate returns the ReleaseDate field value
func (o *Song) GetReleaseDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value
// and a boolean to check if the value has been set.
func (o *Song) GetReleaseDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleaseDate, true
}

// SetReleaseDate sets field value
func (o *Song) SetReleaseDate(v string) {
	o.ReleaseDate = v
}

// GetText returns the Text field value
func (o *Song) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *Song) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *Song) SetText(v string) {
	o.Text = v
}

// GetLink returns the Link field value
func (o *Song) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *Song) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *Song) SetLink(v string) {
	o.Link = v
}

func (o Song) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Song) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["group"] = o.Group
	toSerialize["song"] = o.Song
	toSerialize["releaseDate"] = o.ReleaseDate
	toSerialize["text"] = o.Text
	toSerialize["link"] = o.Link
	return toSerialize, nil
}

func (o *Song) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"group",
		"song",
		"releaseDate",
		"text",
		"link",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSong := _Song{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSong)

	if err != nil {
		return err
	}

	*o = Song(varSong)

	return err
}

type NullableSong struct {
	value *Song
	isSet bool
}

func (v NullableSong) Get() *Song {
	return v.value
}

func (v *NullableSong) Set(val *Song) {
	v.value = val
	v.isSet = true
}

func (v NullableSong) IsSet() bool {
	return v.isSet
}

func (v *NullableSong) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSong(val *Song) *NullableSong {
	return &NullableSong{value: val, isSet: true}
}

func (v NullableSong) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSong) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
